"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("pages_components_map_js",{

/***/ "./pages/components/map.js":
/*!*********************************!*\
  !*** ./pages/components/map.js ***!
  \*********************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"./node_modules/react/jsx-dev-runtime.js\");\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"./node_modules/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var react_dom__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! react-dom */ \"./node_modules/react-dom/index.js\");\n/* harmony import */ var react_dom__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(react_dom__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var _Navbar__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./Navbar */ \"./pages/components/Navbar.js\");\n/* harmony import */ var _alart__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./alart */ \"./pages/components/alart.js\");\n/* harmony import */ var _Popup__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./Popup */ \"./pages/components/Popup.js\");\n/* harmony import */ var _SearchBar__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./SearchBar */ \"./pages/components/SearchBar.js\");\n\nvar _s = $RefreshSig$();\n\n\n\n\n\n\nlet R = 0; // distance // 이건 고정되어 있음 안되는거\nconst r = 5; // 사용자 원 반지름\n// 유틸리티 함수\n// 배열을 지정된 크기의 청크로 나누는 함수\nconst chunkArray = (array, size)=>{\n    const chunked = [];\n    for(let i = 0; i < array.length; i += size){\n        chunked.push(array.slice(i, i + size));\n    }\n    return chunked;\n};\n// Map 컴포넌트\nconst Map = ()=>{\n    _s();\n    // 상태 변수들\n    const [map, setMap] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(null); // 카카오 맵 객체\n    const [kakao, setKakao] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(null); // 카카오 API 객체\n    const [stores, setStores] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)([]); // 상점 목록\n    const markersRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)({}); // 마커 참조 객체\n    const activeInfoWindowRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(null); // 활성 정보 창 참조\n    const [userMarker, setUserMarker] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(null); // 사용자 위치 마커\n    const [userCircle, setUserCircle] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(null); // 사용자 위치 원\n    const [destinationCircle, setDestinationCircle] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(null); // 목적지 원\n    const [destinationMarker, setDestinationMarker] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(null); // 목적지 마커\n    const [polyline, setPolyline] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(null); // 경로선\n    const [watchId, setWatchId] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(null); // 위치 추적 ID\n    const [distanceOverlay, setDistanceOverlay] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(null); // 거리 오버레이\n    const [isCirclesOverlapping, setIsCirclesOverlapping] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(false); // 원 겹침 여부\n    const [overlapOverlay, setOverlapOverlay] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(null); // 겹침 오버레이\n    const [showIcon, setShowIcon] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(false); // 아이콘 표시 여부\n    const [distanceWorker, setDistanceWorker] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(null); // 거리 계산 워커\n    const [selectedStore, setSelectedStore] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(null); // 선택된 상점\n    const [mapSize, setMapSize] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)({\n        width: \"100vw\",\n        height: \"100vh\"\n    }); // 지도 크기\n    // 사용자 이동 버튼 활성화 상태\n    const [isButtonEnabled, setIsButtonEnabled] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(false);\n    // 지도 크기 동적 조절\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        const updateMapSize = ()=>{\n            setMapSize({\n                width: \"\".concat(window.innerWidth, \"px\"),\n                height: \"\".concat(window.innerHeight, \"px\")\n            });\n        };\n        updateMapSize();\n        window.addEventListener(\"resize\", updateMapSize);\n        return ()=>window.removeEventListener(\"resize\", updateMapSize);\n    }, []);\n    // 지도 크기 변경 시 레이아웃 재설정\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        if (map) {\n            map.relayout();\n        }\n    }, [\n        mapSize,\n        map\n    ]);\n    // 거리 계산 워커 설정\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        const worker = new Worker(\"distanceWorker.js\");\n        setDistanceWorker(worker);\n        return ()=>worker.terminate();\n    }, []);\n    // 10초 후 사용자 이동 버튼 활성화\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        const timer = setTimeout(()=>{\n            setIsButtonEnabled(true);\n        }, 7000);\n        return ()=>clearTimeout(timer);\n    }, []);\n    // 비동기 거리 계산 함수\n    const calculateDistanceAsync = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)((lat1, lon1, lat2, lon2)=>{\n        return new Promise((resolve)=>{\n            distanceWorker.onmessage = (e)=>resolve(e.data);\n            distanceWorker.postMessage({\n                lat1,\n                lon1,\n                lat2,\n                lon2\n            });\n        });\n    }, [\n        distanceWorker\n    ]);\n    // API 호출 함수들\n    // 상점 데이터 가져오기\n    const fetchStoreData = async (storeName)=>{\n        try {\n            const response = await fetch(\"/api/store/\".concat(encodeURIComponent(storeName)));\n            if (!response.ok) throw new Error(\"Network response was not ok\");\n            return await response.json();\n        } catch (error) {\n            console.error(\"Error fetching store data:\", error);\n            throw error;\n        }\n    };\n    // 상가 거리 데이터 가져오기\n    const fetchMallStreetData = async ()=>{\n        try {\n            const response = await fetch(\"/api/map/get/mall/street\");\n            if (!response.ok) throw new Error(\"HTTP error! status: \".concat(response.status));\n            return await response.json();\n        } catch (error) {\n            console.error(\"Error fetching mall street data:\", error);\n            throw error;\n        }\n    };\n    // 마커 관련 함수들\n    // 모든 마커 제거\n    const removeAllMarkers = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)(()=>{\n        Object.values(markersRef.current).forEach((param)=>{\n            let { arriveMarker } = param;\n            return arriveMarker.setMap(null);\n        });\n        markersRef.current = {};\n    }, []);\n    // 원 색상 업데이트\n    const updateCircleColors = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)(async (userPosition, destPosition)=>{\n        if (!userCircle || !destinationCircle) {\n            console.error(\"User circle or destination circle is not initialized\");\n            return;\n        }\n        const d = await calculateDistanceAsync(userPosition.getLat(), userPosition.getLng(), destPosition.getLat(), destPosition.getLng()) * 1000;\n        const isOverlapping = d <= Number(R) + r;\n        const strokeColor = isOverlapping ? \"#0000FF\" : \"#304FFE\";\n        const fillColor = isOverlapping ? \"#0000FF\" : \"#304FFE\";\n        userCircle.setOptions({\n            strokeColor,\n            fillColor,\n            strokeOpacity: 0.8,\n            fillOpacity: 0.3\n        });\n        destinationCircle.setOptions({\n            strokeColor,\n            fillColor,\n            strokeOpacity: 0.8,\n            fillOpacity: 0.3\n        });\n        setIsCirclesOverlapping(isOverlapping);\n        // 겹치면\n        if (isOverlapping) {\n            // 원이 겹칠 때의 로직\n            removeAllMarkers();\n            if (overlapOverlay) overlapOverlay.setMap(null);\n            const overlayContainer = document.createElement(\"div\");\n            Object.assign(overlayContainer.style, {\n                width: \"18rem\",\n                height: \"12.3125rem\",\n                borderRadius: \"0.9375rem\",\n                backgroundColor: \"#FFF\",\n                position: \"relative\",\n                zIndex: \"10\"\n            });\n            const newOverlay = new kakao.maps.CustomOverlay({\n                content: overlayContainer,\n                map: map,\n                position: userPosition,\n                zIndex: 10000\n            });\n            react_dom__WEBPACK_IMPORTED_MODULE_2___default().render(/*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_alart__WEBPACK_IMPORTED_MODULE_4__[\"default\"], {\n                onClose: ()=>{\n                    newOverlay.setMap(null);\n                    setShowIcon(true);\n                    if (userMarker) userMarker.setMap(map);\n                    if (userCircle) userCircle.setMap(map);\n                },\n                onMove: ()=>{\n                    console.log(\"Move button clicked\");\n                }\n            }, void 0, false, {\n                fileName: \"/Users/itstime/Client/SpringGreens-Client/test/pages/components/map.js\",\n                lineNumber: 171,\n                columnNumber: 9\n            }, undefined), overlayContainer);\n            setOverlapOverlay(newOverlay);\n        } else if (overlapOverlay) {\n            overlapOverlay.setMap(null);\n        }\n    }, [\n        map,\n        kakao,\n        userCircle,\n        destinationCircle,\n        R,\n        r,\n        overlapOverlay,\n        removeAllMarkers,\n        calculateDistanceAsync,\n        userMarker\n    ]);\n    // 목적지 설정 함수\n    // 목적지를 설정한 다음, 사용자 우치로 이동하지 않아.\n    const setDestination = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)(async function(destLat, destLng) {\n        let storeName = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : null, width = arguments.length > 3 ? arguments[3] : void 0;\n        if (map && kakao) {\n            // 기존 목적지 관련 오버레이 제거\n            [\n                destinationCircle,\n                polyline,\n                distanceOverlay\n            ].forEach((item)=>item && item.setMap(null));\n            // 새 목적지 마커 생성 또는 위치 업데이트\n            const destPosition = new kakao.maps.LatLng(destLat, destLng);\n            if (destinationMarker) {\n                destinationMarker.setPosition(destPosition);\n            } else {}\n            // 목적지 반지름 설정, 새로 계산된 위치에서도 계산이 잘 될 수 있도록 설정\n            R = Number(width);\n            // 목적지 원 생성\n            const newDestCircle = new kakao.maps.Circle({\n                center: destPosition,\n                radius: R,\n                strokeWeight: 2,\n                strokeColor: \"#304FFE\",\n                strokeOpacity: 0.8,\n                strokeStyle: \"solid\",\n                fillColor: \"#304FFE\",\n                fillOpacity: 0.3,\n                map: map\n            });\n            setDestinationCircle(newDestCircle);\n            // 사용자 위치와 목적지 사이의 거리 계산 및 표시\n            const userPosition = userMarker ? userMarker.getPosition() : map.getCenter();\n            const userLat = userPosition.getLat();\n            const userLng = userPosition.getLng();\n            const distance = await calculateDistanceAsync(userLat, userLng, destLat, destLng);\n            const newDistanceOverlay = new kakao.maps.CustomOverlay({\n                position: new kakao.maps.LatLng((userLat + destLat) / 2, (userLng + destLng) / 2),\n                content: '<div style=\"padding:5px;background:transparent;border-radius:5px;color:black;\">'.concat((distance * 1000).toFixed(0), \"m</div>\"),\n                map: map\n            });\n            setDistanceOverlay(newDistanceOverlay);\n            // 경로선 그리기\n            const newPolyline = new kakao.maps.Polyline({\n                path: [\n                    userPosition,\n                    destPosition\n                ],\n                strokeWeight: 3,\n                strokeColor: \"#F08080\",\n                strokeOpacity: 0.7,\n                strokeStyle: \"solid\"\n            });\n            newPolyline.setMap(map);\n            setPolyline(newPolyline);\n            // 지도 범위 설정\n            const bounds = new kakao.maps.LatLngBounds();\n            bounds.extend(userPosition);\n            bounds.extend(destPosition);\n            map.setBounds(bounds);\n            // 원 색상 업데이트\n            updateCircleColors(userPosition, destPosition);\n            // 기존 위치 추적 제거\n            if (watchId) navigator.geolocation.clearWatch(watchId);\n            // 새 위치 추적 설정\n            const newWatchId = navigator.geolocation.watchPosition(async (position)=>{\n                const newUserPosition = new kakao.maps.LatLng(position.coords.latitude, position.coords.longitude);\n                // 새 위치를 추적하게 되면, 유저 마커와 원을 새로운 유저의 위치로 변경해준다. \n                userMarker.setPosition(newUserPosition);\n                userCircle.setPosition(newUserPosition);\n                // map.setCenter(newUserPosition);\n                updateCircleColors(newUserPosition, destPosition);\n                newPolyline.setPath([\n                    newUserPosition,\n                    destPosition\n                ]);\n                const newDistance = await calculateDistanceAsync(newUserPosition.getLat(), newUserPosition.getLng(), destLat, destLng);\n                newDistanceOverlay.setPosition(new kakao.maps.LatLng((newUserPosition.getLat() + destLat) / 2, (newUserPosition.getLng() + destLng) / 2));\n                console.log(\"새로운 거리 계산 값 : \", distance, typeof R, R);\n                const isOverlapping = (newDistance * 1000).toFixed(0) <= (Number(R) + r).toFixed(0);\n                console.log(\"도착 여부 : \", R + r, (distance * 1000).toFixed(0), isOverlapping);\n                newDistanceOverlay.setContent('<div style=\"padding:5px;background:transparent;border-radius:5px;color: black;\">'.concat((newDistance * 1000).toFixed(0), \"m</div>\"));\n                const strokeColor = isOverlapping ? \"#0077ff\" : \"#F08080\";\n                const fillColor = isOverlapping ? \"#0077ff\" : \"#F08080\";\n                // 만약 겹친다면\n                if (isOverlapping) {\n                    // 사용자 원과 목적지 원의 스타일 업데이트\n                    if (userCircle) {\n                        userCircle.setOptions({\n                            strokeColor: strokeColor,\n                            fillColor: fillColor,\n                            strokeOpacity: 0.8,\n                            fillOpacity: 0.3\n                        });\n                    } else {\n                        console.warn(\"userCircle is not initialized\");\n                    }\n                    if (newDestCircle) {\n                        newDestCircle.setOptions({\n                            strokeColor: strokeColor,\n                            fillColor: fillColor,\n                            strokeOpacity: 0.8,\n                            fillOpacity: 0.3\n                        });\n                    } else {\n                        console.warn(\"destinationCircle is not initialized\");\n                    }\n                    const newPolyline = new kakao.maps.Polyline({\n                        path: [\n                            userPosition,\n                            destPosition\n                        ],\n                        strokeWeight: 3,\n                        strokeColor: \"#0077ff\",\n                        strokeOpacity: 0.7,\n                        strokeStyle: \"solid\"\n                    });\n                    newPolyline.setMap(map);\n                    setPolyline(newPolyline);\n                } else {\n                    // 사용자 원과 목적지 원의 스타일 업데이트\n                    if (userCircle) {\n                        userCircle.setOptions({\n                            strokeColor: strokeColor,\n                            fillColor: fillColor,\n                            strokeOpacity: 0.8,\n                            fillOpacity: 0.3\n                        });\n                    } else {\n                        console.warn(\"userCircle is not initialized\");\n                    }\n                    if (newDestCircle) {\n                        newDestCircle.setOptions({\n                            strokeColor: strokeColor,\n                            fillColor: fillColor,\n                            strokeOpacity: 0.8,\n                            fillOpacity: 0.3\n                        });\n                    } else {\n                        console.warn(\"destinationCircle is not initialized\");\n                    }\n                    const newPolyline = new kakao.maps.Polyline({\n                        path: [\n                            userPosition,\n                            destPosition\n                        ],\n                        strokeWeight: 3,\n                        strokeColor: strokeColor,\n                        strokeOpacity: 0.7,\n                        strokeStyle: \"solid\"\n                    });\n                    newPolyline.setMap(map);\n                    setPolyline(newPolyline);\n                }\n            }, (error)=>{\n                console.error(\"Error watching user location:\", error);\n            }, {\n                enableHighAccuracy: true,\n                maximumAge: 0,\n                timeout: 5000\n            });\n            setWatchId(newWatchId);\n            // 활성 정보 창 닫기\n            if (activeInfoWindowRef.current) {\n                activeInfoWindowRef.current.close();\n                activeInfoWindowRef.current = null;\n            }\n            // 선택된 상점 설정\n            if (storeName) {\n                setSelectedStore({\n                    name: storeName,\n                    lat: destLat,\n                    lng: destLng\n                });\n            } else {\n                setSelectedStore(null);\n            }\n            // 상점 목록 업데이트\n            const newStores = stores.filter((store)=>store.name !== storeName);\n            newStores.push({\n                name: storeName || \"목적지\",\n                lat: destLat,\n                lng: destLng\n            });\n            setStores(newStores);\n        }\n    }, [\n        map,\n        kakao,\n        userMarker,\n        userCircle,\n        destinationCircle,\n        destinationMarker,\n        polyline,\n        watchId,\n        distanceOverlay,\n        updateCircleColors,\n        R,\n        calculateDistanceAsync,\n        stores\n    ]);\n    // 컴포넌트 언마운트 시 정리\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        return ()=>{\n            if (watchId) navigator.geolocation.clearWatch(watchId);\n            if (distanceOverlay) distanceOverlay.setMap(null);\n        };\n    }, [\n        watchId,\n        distanceOverlay\n    ]);\n    const addStoreMarker = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)((lat, lng, name, id)=>{\n        if (!map || !kakao) {\n            console.error(\"Map or Kakao object is not initialized\");\n            return null;\n        }\n        // 상가 이미지\n        const arriveSrc = \"https://t1.daumcdn.net/localimg/localimages/07/mapapidoc/blue_b.png\", arriveSize = new window.kakao.maps.Size(50, 45), arriveOption = {\n            offset: new window.kakao.maps.Point(15, 43) // 도착 마커이미지에서 마커의 좌표에 일치시킬 좌표를 설정합니다 (기본값은 이미지의 가운데 아래입니다)\n        };\n        const position = new kakao.maps.LatLng(lat, lng);\n        // 도착 마커 이미지를 생성합니다\n        const arriveImage = new window.kakao.maps.MarkerImage(arriveSrc, arriveSize, arriveOption);\n        // 도착 마커를 생성합니다 \n        const arriveMarker = new window.kakao.maps.Marker({\n            map: map,\n            position: position,\n            image: arriveImage,\n            zIndex: 1\n        });\n        const content = document.createElement(\"div\");\n        const infowindow = new kakao.maps.InfoWindow({\n            content: content,\n            zIndex: 2\n        });\n        kakao.maps.event.addListener(arriveMarker, \"click\", function() {\n            var _this = this;\n            if (activeInfoWindowRef.current) {\n                activeInfoWindowRef.current.close();\n            }\n            const renderPopup = function() {\n                let storeData = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : null, error = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : null;\n                // 팝업창 setDestination\n                react_dom__WEBPACK_IMPORTED_MODULE_2___default().render(/*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_Popup__WEBPACK_IMPORTED_MODULE_5__[\"default\"], {\n                    name: name,\n                    onSetDestination: (lat, lng, width)=>setDestination(lat, lng, name, width),\n                    storeData: storeData,\n                    error: error,\n                    isDestination: selectedStore && selectedStore.name === name\n                }, void 0, false, {\n                    fileName: \"/Users/itstime/Client/SpringGreens-Client/test/pages/components/map.js\",\n                    lineNumber: 426,\n                    columnNumber: 11\n                }, _this), content);\n            };\n            renderPopup();\n            infowindow.open(map, arriveMarker);\n            activeInfoWindowRef.current = infowindow;\n            const clickTimeout = setTimeout(()=>{\n                kakao.maps.event.addListener(map, \"click\", closeInfoWindow);\n            }, 100);\n            // 상점 데이터 가져오기\n            fetch(\"/api/map/get/products/map/\".concat(encodeURIComponent(name))).then((response)=>{\n                if (!response.ok) {\n                    throw new Error(\"Network response was not ok\");\n                }\n                return response.json();\n            }).then((data)=>{\n                renderPopup(data);\n            }).catch((error)=>{\n                console.error(\"Error fetching store data:\", error);\n                renderPopup(null, \"데이터를 불러오는 데 실패했습니다.\");\n            });\n            // 정보 창 닫기 함수\n            function closeInfoWindow() {\n                infowindow.close();\n                activeInfoWindowRef.current = null;\n                kakao.maps.event.removeListener(map, \"click\", closeInfoWindow);\n                clearTimeout(clickTimeout);\n            }\n        });\n        return {\n            arriveMarker,\n            infowindow\n        };\n    }, [\n        map,\n        kakao,\n        setDestination,\n        selectedStore\n    ]);\n    // 지도 초기화 함수\n    const initializeMap = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)(()=>{\n        if (window.kakao && window.kakao.maps) {\n            const mapContainer = document.getElementById(\"map\");\n            const mapOptions = {\n                center: new window.kakao.maps.LatLng(36.9692, 127.8717),\n                level: 3\n            };\n            const kakaoMap = new window.kakao.maps.Map(mapContainer, mapOptions);\n            setMap(kakaoMap);\n            setKakao(window.kakao);\n            // 사용자 위치 가져오기 및 마커 설정\n            if (navigator.geolocation) {\n                navigator.geolocation.getCurrentPosition((position)=>{\n                    const userLat = position.coords.latitude;\n                    const userLng = position.coords.longitude;\n                    const userPosition = new window.kakao.maps.LatLng(userLat, userLng);\n                    // 사용자의 위치를 지도 중심으로 설정\n                    kakaoMap.setCenter(userPosition);\n                    const imageSrc = \"https://t1.daumcdn.net/localimg/localimages/07/mapapidoc/marker_red.png\", imageSize = new window.kakao.maps.Size(64, 69), imageOption = {\n                        offset: new window.kakao.maps.Point(27, 69)\n                    }; // 마커이미지의 옵션입니다. 마커의 좌표와 일치시킬 이미지 안에서의 좌표를 설정합니다.\n                    // 마커의 이미지정보를 가지고 있는 마커이미지를 생성합니다\n                    const markerImage = new window.kakao.maps.MarkerImage(imageSrc, imageSize, imageOption);\n                    // 마커를 생성합니다\n                    const marker = new window.kakao.maps.Marker({\n                        position: userPosition,\n                        image: markerImage,\n                        map: kakaoMap\n                    });\n                    setUserMarker(marker);\n                    const circle = new window.kakao.maps.Circle({\n                        center: userPosition,\n                        radius: r,\n                        strokeWeight: 2,\n                        strokeColor: \"#F08080\",\n                        strokeOpacity: 0.8,\n                        strokeStyle: \"solid\",\n                        fillColor: \"#F08080\",\n                        fillOpacity: 0.3,\n                        map: kakaoMap\n                    });\n                    setUserCircle(circle);\n                }, (error)=>{\n                    console.error(\"Error getting user location:\", error);\n                });\n            } else {\n                console.error(\"Geolocation is not supported by this browser.\");\n            }\n        }\n    }, [\n        r\n    ]);\n    // 카카오 맵 스크립트 로드\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        const script = document.createElement(\"script\");\n        script.src = \"//dapi.kakao.com/v2/maps/sdk.js?appkey=50912e872dcc098ce3db6b205dd83c96&libraries=services&autoload=false\";\n        script.async = true;\n        script.onload = ()=>{\n            window.kakao.maps.load(initializeMap);\n        };\n        document.head.appendChild(script);\n        return ()=>{\n            document.head.removeChild(script);\n        };\n    }, [\n        initializeMap\n    ]);\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        if (map && kakao) {\n            Object.values(markersRef.current).forEach((param)=>{\n                let { arriveMarker, infowindow } = param;\n                if (arriveMarker) arriveMarker.setMap(null);\n                if (infowindow) infowindow.close();\n            });\n            markersRef.current = {};\n            stores.forEach((store)=>{\n                const markerInfo = addStoreMarker(store.lat, store.lng, store.name, store.id);\n                if (markerInfo) {\n                    markersRef.current[store.id] = markerInfo;\n                }\n            });\n            if (activeInfoWindowRef.current) {\n                activeInfoWindowRef.current.close();\n                activeInfoWindowRef.current = null;\n            }\n        }\n    }, [\n        map,\n        kakao,\n        stores,\n        addStoreMarker\n    ]);\n    // 검색 처리 함수\n    const handleSearch = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)((query)=>{\n        if (map && kakao && kakao.maps.services) {\n            const ps = new kakao.maps.services.Places();\n            ps.keywordSearch(query, (data, status, _pagination)=>{\n                if (status === kakao.maps.services.Status.OK) {\n                    const bounds = new kakao.maps.LatLngBounds();\n                    let newStores = [];\n                    Object.values(markersRef.current).forEach((param)=>{\n                        let { arriveMarker, infowindow } = param;\n                        arriveMarker.setMap(null);\n                        infowindow.close();\n                    });\n                    markersRef.current = {};\n                    for(let i = 0; i < data.length; i++){\n                        const markerPosition = new kakao.maps.LatLng(data[i].y, data[i].x);\n                        const newStore = {\n                            id: data[i].id,\n                            name: data[i].place_name,\n                            lat: data[i].y,\n                            lng: data[i].x,\n                            address: data[i].address_name,\n                            phone: data[i].phone\n                        };\n                        newStores.push(newStore);\n                        bounds.extend(markerPosition);\n                        const markerInfo = addStoreMarker(newStore.lat, newStore.lng, newStore.name, newStore.id);\n                        markersRef.current[newStore.id] = markerInfo;\n                    }\n                    map.setBounds(bounds);\n                    setStores(newStores);\n                }\n            });\n        }\n    }, [\n        map,\n        kakao,\n        setStores,\n        addStoreMarker\n    ]);\n    // 상가 거리 마커 추가 함수\n    const addMarkersByStoreNameList = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)(async ()=>{\n        if (map && kakao && kakao.maps.services) {\n            try {\n                const mallStreetData = await fetchMallStreetData();\n                // 기존 마커와 인포윈도우 제거\n                Object.values(markersRef.current).forEach((param)=>{\n                    let { arriveMarker, infowindow } = param;\n                    arriveMarker.setMap(null);\n                    infowindow.close();\n                });\n                markersRef.current = {};\n                // 기준 좌표로 지도 이동\n                const latitude = mallStreetData.data.standard_position.latitude;\n                const longitude = mallStreetData.data.standard_position.longitude;\n                console.log(\"Center Coordinates:\", latitude, longitude);\n                const centerPosition = new kakao.maps.LatLng(latitude, longitude);\n                map.setCenter(centerPosition);\n                map.setLevel(3, {\n                    animate: true\n                }); // 5는 예시 값, 필요에 따라 조정\n                const bounds = new kakao.maps.LatLngBounds();\n                const ps = new kakao.maps.services.Places();\n                // 검색 및 마커 추가\n                const searchAndAddMarker = async (storeName, index)=>{\n                    return new Promise((resolve)=>{\n                        ps.keywordSearch(storeName, (data, status)=>{\n                            if (status === kakao.maps.services.Status.OK) {\n                                const place = data[0];\n                                const lat = place.y;\n                                const lng = place.x;\n                                const position = new kakao.maps.LatLng(lat, lng);\n                                const markerInfo = addStoreMarker(lat, lng, storeName, index.toString());\n                                markersRef.current[index.toString()] = markerInfo;\n                                bounds.extend(position);\n                            } else {\n                                console.log(\"No results found for \".concat(storeName));\n                            }\n                            resolve();\n                        }, {\n                            location: centerPosition,\n                            radius: 5000\n                        });\n                    });\n                };\n                // 청크 단위로 마커 추가\n                const chunks = chunkArray(mallStreetData.data.mall_name_list, 5);\n                for (const chunk of chunks){\n                    await Promise.all(chunk.map((storeName, index)=>searchAndAddMarker(storeName, index)));\n                }\n                // 지도 범위 조정\n                map.setBounds(bounds);\n            } catch (error) {\n                console.error(\"Error in addMarkersByStoreNameList:\", error);\n            }\n        }\n    }, [\n        map,\n        kakao,\n        addStoreMarker,\n        fetchMallStreetData\n    ]);\n    // 상가 거리 버튼 클릭 핸들러\n    const handleMallStreetButtonClick = ()=>{\n        addMarkersByStoreNameList();\n    };\n    // 사용자 지정 위치로 이동 함수\n    const moveToCustomPosition = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)(()=>{\n        map.setLevel(1);\n        if (map && kakao && userMarker && userCircle) {\n            console.log(\"click custom postion\");\n            // 사용자 위치를 customPosition으로 받아오는게 아니라, 실시간으로 받아 와야함.\n            navigator.geolocation.getCurrentPosition((position)=>{\n                const newPosition = new kakao.maps.LatLng(position.coords.latitude, position.coords.longitude);\n                // 사용자 마커 및 원 이동\n                userMarker.setPosition(newPosition);\n                userCircle.setPosition(newPosition);\n                map.setCenter(newPosition);\n                map.setLevel(1);\n                // 목적지가 설정되어 있다면 경로와 거리 정보 업데이트\n                if (destinationCircle && destinationMarker) {\n                    const destPosition = destinationMarker.getPosition();\n                    // 원 색상 업데이트\n                    updateCircleColors(newPosition, destPosition);\n                    const newPolyline = new kakao.maps.Polyline({\n                        path: [\n                            newPosition,\n                            destPosition\n                        ],\n                        strokeWeight: 3,\n                        strokeColor: \"#F08080\",\n                        strokeOpacity: 0.7,\n                        strokeStyle: \"solid\"\n                    });\n                    if (polyline) polyline.setMap(null);\n                    newPolyline.setMap(map);\n                    setPolyline(newPolyline);\n                    // 거리 계산 및 표시 업데이트\n                    calculateDistanceAsync(newPosition.getLat(), newPosition.getLng(), destPosition.getLat(), destPosition.getLng()).then((distance)=>{\n                        if (distanceOverlay) {\n                            distanceOverlay.setPosition(new kakao.maps.LatLng((newPosition.getLat() + destPosition.getLat()) / 2, (newPosition.getLng() + destPosition.getLng()) / 2));\n                            distanceOverlay.setContent('<div style=\"padding:5px;background:white;border-radius:5px;color:black;\">'.concat((distance * 1000).toFixed(0), \"m</div>\"));\n                        }\n                    });\n                }\n            });\n        } else {\n            console.log(\"custom position not initialized\");\n        }\n    }, [\n        map,\n        kakao,\n        userMarker,\n        userCircle,\n        destinationMarker,\n        polyline,\n        distanceOverlay,\n        calculateDistanceAsync,\n        updateCircleColors\n    ]);\n    // 컴포넌트 렌더링\n    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n        style: {\n            position: \"relative\",\n            width: \"100vw\",\n            height: \"100vh\",\n            overflow: \"auto\"\n        },\n        children: [\n            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                id: \"map\",\n                style: {\n                    width: \"100vw\",\n                    height: \"calc(100% - 70px)\",\n                    overflow: \"auto\"\n                }\n            }, void 0, false, {\n                fileName: \"/Users/itstime/Client/SpringGreens-Client/test/pages/components/map.js\",\n                lineNumber: 729,\n                columnNumber: 5\n            }, undefined),\n            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_SearchBar__WEBPACK_IMPORTED_MODULE_6__[\"default\"], {\n                onSearch: handleSearch\n            }, void 0, false, {\n                fileName: \"/Users/itstime/Client/SpringGreens-Client/test/pages/components/map.js\",\n                lineNumber: 735,\n                columnNumber: 5\n            }, undefined),\n            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"button\", {\n                onClick: handleMallStreetButtonClick,\n                style: {\n                    width: \"6rem\",\n                    height: \"1.8rem\",\n                    position: \"absolute\",\n                    top: \"5rem\",\n                    padding: \"0.38rem, 0.44rem\",\n                    left: \"10px\",\n                    backgroundColor: \"#304FFE\",\n                    color: \"white\",\n                    borderRadius: \"5px\",\n                    border: \"none\",\n                    cursor: \"pointer\",\n                    boxShadow: \"0 2px 4px rgba(0,0,0,0.5)\",\n                    zIndex: 10\n                },\n                children: \"상가거리이동\"\n            }, void 0, false, {\n                fileName: \"/Users/itstime/Client/SpringGreens-Client/test/pages/components/map.js\",\n                lineNumber: 736,\n                columnNumber: 5\n            }, undefined),\n            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_Navbar__WEBPACK_IMPORTED_MODULE_3__[\"default\"], {}, void 0, false, {\n                fileName: \"/Users/itstime/Client/SpringGreens-Client/test/pages/components/map.js\",\n                lineNumber: 757,\n                columnNumber: 5\n            }, undefined),\n            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"button\", {\n                onClick: ()=>moveToCustomPosition(),\n                style: {\n                    position: \"absolute\",\n                    bottom: \"100px\",\n                    left: \"10px\",\n                    padding: \"10px\",\n                    backgroundColor: \"#304FFE\",\n                    color: \"white\",\n                    border: \"none\",\n                    borderRadius: \"5px\",\n                    cursor: \"pointer\",\n                    boxShadow: \"0 2px 4px rgba(0,0,0,0.0.6)\",\n                    zIndex: 10\n                },\n                children: [\n                    \"사용자 위치 이동\",\n                    showIcon && /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                        style: {\n                            position: \"fixed\",\n                            bottom: \"10%\",\n                            left: \"90%\",\n                            transform: \"translateX(-50%)\",\n                            cursor: \"pointer\",\n                            zIndex: 10\n                        },\n                        onClick: ()=>{\n                            setShowIcon(false);\n                            if (overlapOverlay) {\n                                overlapOverlay.setMap(map);\n                            }\n                        },\n                        children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"svg\", {\n                            width: \"40\",\n                            height: \"40\",\n                            viewBox: \"0 0 40 40\",\n                            fill: \"none\",\n                            xmlns: \"http://www.w3.org/2000/svg\",\n                            children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"g\", {\n                                id: \"Group 232\",\n                                children: [\n                                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"path\", {\n                                        id: \"Vector\",\n                                        d: \"M19 27H21.6667V19H19V27ZM20.3333 16.3333C20.7111 16.3333 21.028 16.2053 21.284 15.9493C21.54 15.6933 21.6676 15.3769 21.6667 15C21.6658 14.6231 21.5378 14.3067 21.2827 14.0507C21.0276 13.7947 20.7111 13.6667 20.3333 13.6667C19.9556 13.6667 19.6391 13.7947 19.384 14.0507C19.1289 14.3067 19.0009 14.6231 19 15C18.9991 15.3769 19.1271 15.6938 19.384 15.9507C19.6409 16.2076 19.9573 16.3351 20.3333 16.3333ZM20.3333 33.6667C18.4889 33.6667 16.7556 33.3164 15.1333 32.616C13.5111 31.9156 12.1 30.9658 10.9 29.7667C9.7 28.5676 8.75022 27.1564 8.05067 25.5333C7.35111 23.9102 7.00089 22.1769 7 20.3333C6.99911 18.4898 7.34934 16.7564 8.05067 15.1333C8.752 13.5102 9.70178 12.0991 10.9 10.9C12.0982 9.70089 13.5093 8.75111 15.1333 8.05067C16.7573 7.35022 18.4907 7 20.3333 7C22.176 7 23.9093 7.35022 25.5333 8.05067C27.1573 8.75111 28.5684 9.70089 29.7667 10.9C30.9649 12.0991 31.9151 13.5102 32.6173 15.1333C33.3196 16.7564 33.6693 18.4898 33.6667 20.3333C33.664 22.1769 33.3138 23.9102 32.616 25.5333C31.9182 27.1564 30.9684 28.5676 29.7667 29.7667C28.5649 30.9658 27.1538 31.916 25.5333 32.6173C23.9129 33.3187 22.1796 33.6684 20.3333 33.6667Z\",\n                                        fill: \"#3554FE\"\n                                    }, void 0, false, {\n                                        fileName: \"/Users/itstime/Client/SpringGreens-Client/test/pages/components/map.js\",\n                                        lineNumber: 789,\n                                        columnNumber: 15\n                                    }, undefined),\n                                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"circle\", {\n                                        id: \"Ellipse 14\",\n                                        cx: \"20\",\n                                        cy: \"20\",\n                                        r: \"20\",\n                                        fill: \"#3554FE\",\n                                        fillOpacity: \"0.25\"\n                                    }, void 0, false, {\n                                        fileName: \"/Users/itstime/Client/SpringGreens-Client/test/pages/components/map.js\",\n                                        lineNumber: 790,\n                                        columnNumber: 15\n                                    }, undefined),\n                                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"circle\", {\n                                        id: \"Ellipse 15\",\n                                        cx: \"20\",\n                                        cy: \"20\",\n                                        r: \"16\",\n                                        fill: \"#3554FE\",\n                                        fillOpacity: \"0.25\"\n                                    }, void 0, false, {\n                                        fileName: \"/Users/itstime/Client/SpringGreens-Client/test/pages/components/map.js\",\n                                        lineNumber: 791,\n                                        columnNumber: 15\n                                    }, undefined)\n                                ]\n                            }, void 0, true, {\n                                fileName: \"/Users/itstime/Client/SpringGreens-Client/test/pages/components/map.js\",\n                                lineNumber: 788,\n                                columnNumber: 13\n                            }, undefined)\n                        }, void 0, false, {\n                            fileName: \"/Users/itstime/Client/SpringGreens-Client/test/pages/components/map.js\",\n                            lineNumber: 787,\n                            columnNumber: 11\n                        }, undefined)\n                    }, void 0, false, {\n                        fileName: \"/Users/itstime/Client/SpringGreens-Client/test/pages/components/map.js\",\n                        lineNumber: 774,\n                        columnNumber: 9\n                    }, undefined)\n                ]\n            }, void 0, true, {\n                fileName: \"/Users/itstime/Client/SpringGreens-Client/test/pages/components/map.js\",\n                lineNumber: 759,\n                columnNumber: 5\n            }, undefined)\n        ]\n    }, void 0, true, {\n        fileName: \"/Users/itstime/Client/SpringGreens-Client/test/pages/components/map.js\",\n        lineNumber: 728,\n        columnNumber: 5\n    }, undefined);\n};\n_s(Map, \"/ymu1cPKsdPCsvT4pf+xzzGH2Ro=\");\n_c = Map;\n/* harmony default export */ __webpack_exports__[\"default\"] = (Map);\nvar _c;\n$RefreshReg$(_c, \"Map\");\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./pages/components/map.js\n"));

/***/ })

});